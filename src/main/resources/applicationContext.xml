<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:component-scan base-package="com.springmvc4maven"/>

	<!-- DB initialize -->
	<context:annotation-config />


	<!-- application-properties file의 key value 값을을 읽어와서 database connection 
		pooling에 사용 -->
	<context:property-placeholder location="classpath*:db.properties" />

	<bean id="masterDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<bean id="slaveDataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClass}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<bean id="dataSource" class="com.springmvc4maven.datasource.ReplicationDataSource">
		<property name="targetDataSources">
			<map>
				<!--write-->
				<entry key="master" value-ref="masterDataSource"/>
				<!--read-->
				<entry key="slave" value-ref="slaveDataSource"/>
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource"/>
	</bean>

	<!-- MyBatis 설정 추가 = dataSource와의 의존관계 주입 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:mapperLocations="classpath*:/com/springmvc4maven/dao/users/*Mapper.xml"/>

	<!-- 配置扫描器 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描me.gacl.dao这个包以及它的子包下的所有映射接口类 -->
		<property name="basePackage" value="com.springmvc4maven.dao.users" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>

	<!--事务控制-->
	<!-- 配置Spring的事务管理器 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="append*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="repair" propagation="REQUIRED" />
			<tx:method name="delAndRepair" propagation="REQUIRED" />
			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="transfer*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.springmvc4maven.service.impl.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
	</aop:config>

	<!--读写分离-->
		<bean id="replicationDataSourceAspect" class="com.springmvc4maven.datasource.ReplicationDataSourceAspect"/>
		<aop:config>
			<aop:aspect id="c" ref="replicationDataSourceAspect" order="1">
				<aop:pointcut id="mapperTx" expression="execution( * com.springmvc4maven.service.*.*(..))"/>
				<aop:before method="before" pointcut-ref="mapperTx"/>
			</aop:aspect>
		</aop:config>

	<!--自己测试异常处理-->
	<bean id="exceptionHandler" class="com.springmvc4maven.aop.ExceptionHandler" />
	<bean id="aroundInterceptor" class="com.springmvc4maven.aop.MyInterceptor" />
	<aop:config>
		<aop:aspect ref="exceptionHandler">
			<aop:pointcut id="exceptionService" expression="execution(* com.springmvc4maven.service.impl.*.*(..))" />
			<aop:after-throwing pointcut-ref="exceptionService" method="afterThrowing" throwing="e" />
		</aop:aspect>
		<aop:aspect ref="aroundInterceptor">
			<aop:pointcut id="exceptionService" expression="execution(* com.springmvc4maven.service.impl.*.*(..))" />
			<aop:around method="roundExecute" pointcut-ref="exceptionService"/>
		</aop:aspect>
	</aop:config>

</beans>
